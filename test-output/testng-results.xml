<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" total="6" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="My Sample Suite" duration-ms="414" started-at="2014-07-18T15:13:43Z" finished-at="2014-07-18T15:13:43Z">
    <groups>
    </groups>
    <test name="Learning assertions" duration-ms="29" started-at="2014-07-18T15:13:43Z" finished-at="2014-07-18T15:13:43Z">
      <class name="tests.UsingAssertions">
        <test-method status="FAIL" signature="testGoogleSearch()[pri:0, instance:tests.UsingAssertions@12eb1882]" name="testGoogleSearch" duration-ms="13" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Error coming because of xyz reason expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Error coming because of xyz reason expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at tests.UsingAssertions.testGoogleSearch(UsingAssertions.java:25)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.TestNG.privateMain(TestNG.java:1364)
	at org.testng.TestNG.main(TestNG.java:1333)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGoogleSearch -->
      </class> <!-- tests.UsingAssertions -->
    </test> <!-- Learning assertions -->
    <test name="Application Login" duration-ms="8" started-at="2014-07-18T15:13:43Z" finished-at="2014-07-18T15:13:43Z">
      <class name="tests.LoginTest">
        <test-method status="PASS" signature="openConnection()[pri:0, instance:tests.LoginTest@5c33e2dc]" name="openConnection" is-config="true" duration-ms="2" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openConnection -->
        <test-method status="PASS" signature="openBrowser()[pri:0, instance:tests.LoginTest@5c33e2dc]" name="openBrowser" is-config="true" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openBrowser -->
        <test-method status="PASS" signature="testLogin()[pri:0, instance:tests.LoginTest@5c33e2dc]" name="testLogin" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogin -->
        <test-method status="PASS" signature="closeBrowser()[pri:0, instance:tests.LoginTest@5c33e2dc]" name="closeBrowser" is-config="true" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeBrowser -->
        <test-method status="PASS" signature="openBrowser()[pri:0, instance:tests.LoginTest@5c33e2dc]" name="openBrowser" is-config="true" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openBrowser -->
        <test-method status="PASS" signature="testRegister()[pri:0, instance:tests.LoginTest@5c33e2dc]" name="testRegister" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegister -->
        <test-method status="PASS" signature="closeBrowser()[pri:0, instance:tests.LoginTest@5c33e2dc]" name="closeBrowser" is-config="true" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeBrowser -->
        <test-method status="PASS" signature="closeConnection()[pri:0, instance:tests.LoginTest@5c33e2dc]" name="closeConnection" is-config="true" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeConnection -->
      </class> <!-- tests.LoginTest -->
    </test> <!-- Application Login -->
    <test name="Selling Books" duration-ms="2" started-at="2014-07-18T15:13:43Z" finished-at="2014-07-18T15:13:43Z">
      <class name="tests.SellItemsTest">
        <test-method status="SKIP" signature="shouldWeSkip()[pri:0, instance:tests.SellItemsTest@1fb59afc]" name="shouldWeSkip" is-config="true" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[Skipping because user not logged in]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: Skipping because user not logged in
	at tests.SellItemsTest.shouldWeSkip(SellItemsTest.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.TestRunner.beforeRun(TestRunner.java:641)
	at org.testng.TestRunner.run(TestRunner.java:609)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.TestNG.privateMain(TestNG.java:1364)
	at org.testng.TestNG.main(TestNG.java:1333)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldWeSkip -->
        <test-method status="SKIP" signature="testSellingBooks()[pri:0, instance:tests.SellItemsTest@1fb59afc]" name="testSellingBooks" duration-ms="0" started-at="2014-07-18T20:43:43Z" finished-at="2014-07-18T20:43:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSellingBooks -->
      </class> <!-- tests.SellItemsTest -->
    </test> <!-- Selling Books -->
    <test name="Sending Mails" duration-ms="5" started-at="2014-07-18T15:13:43Z" finished-at="2014-07-18T15:13:43Z">
      <class name="tests.SendMailTest">
        <test-method status="PASS" signature="testMailSending(java.lang.String, java.lang.Integer, java.lang.String)[pri:0, instance:tests.SendMailTest@41aac3f8]" name="testMailSending" duration-ms="0" started-at="2014-07-18T20:43:43Z" data-provider="getData" finished-at="2014-07-18T20:43:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[xyz@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[howzz life]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMailSending -->
        <test-method status="PASS" signature="testMailSending(java.lang.String, java.lang.Integer, java.lang.String)[pri:0, instance:tests.SendMailTest@41aac3f8]" name="testMailSending" duration-ms="1" started-at="2014-07-18T20:43:43Z" data-provider="getData" finished-at="2014-07-18T20:43:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[abc@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[444]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[life is good]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMailSending -->
      </class> <!-- tests.SendMailTest -->
    </test> <!-- Sending Mails -->
  </suite> <!-- My Sample Suite -->
</testng-results>
